#include <iostream>
using namespace std;
void ChangeIt_1(int n) {
    n = 5;
}

void ChangeIt_2(int *n) {
    *n = 6;
}

void ChangeIt_3(int &n) {
    n = 7;
}

int ChangeIt_4(int n) {
    n = 8;
  return n;
}

void Swap(int &x, int *y){
	
	int temp = 0;
	
	if(x> *y){
		temp = x;
		x = *y;
		*y = temp; 
}}

double getAverage(int *array, int SIZE){
	int sum = 0;
	double avg =0;
	for(int i = 0; i < SIZE; i++){
		sum += *array++;
	}
	
	//CASTING
	avg = double(sum)/ double(SIZE);
	return avg;
}


main(){
   int *p; //declare p as pointer
   int x=10, y=7, SIZE=5, data[SIZE]={1,3,2,5,4};
   p=&x; //reference of x

   ChangeIt_1(x);
      cout << "ChangeIt_1 : " << *p << endl;
   ChangeIt_2(&x);
      cout << "ChangeIt_2 : " << *p << endl;
   ChangeIt_3(x);
    x = ChangeIt_4(x);
      cout << "ChangeIt_4 : " << *p << endl << endl;
 
    
    Swap(x, &y);
    
    cout << "Value of x: " << x << endl;
    cout << "Value of y: " << y << endl;
    cout << "The average of the array is " << getAverage(data, SIZE) << endl;
      
}

/*
1. Inspect the code and in your own interpretation, describe the reason call to function ChangeIt_1(n) will not change x in main()?
= Function 'ChangeIt_1' is pass by value. This is because the function 'ChangeIt_1' is not taking a pointer of an integer and not returning any value. 

2. Inspect the code and in your own interpretation, describe the reason parameter n in ChangeIt_2(int *n) is a pointer, and statement in the function is *n = 6 ?
= If we include '*' then the identifier will be a pointer. ChangeIt_2(int *n) indicate that this is the pointer that we send to a function. 
  *n = 6 means that n will be the pointer of 6.

3. Write a function called void swap with two parameters, which will receive the address of x and y as pointer. 
The function should swap the value of x and y only if x is larger than y.
Print the value of x and y after the function call.


4. Write a function called double getAverage(int *array, int SIZE), where it accept the array as pointer, and return the average of the array. 
Print the returned value from this function. 
Always use *array rather than subscript to access the array
value.
*/
